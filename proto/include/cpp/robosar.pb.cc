// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robosar.proto

#include "robosar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_robosar_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robosar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Accelerometer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robosar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Encoder_count;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robosar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Encoder_speed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robosar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gyroscope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robosar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Infrared;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_robosar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ultrasonic;
}  // namespace protobuf_robosar_2eproto
namespace robosar_fms {
class AccelerometerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Accelerometer>
      _instance;
} _Accelerometer_default_instance_;
class UltrasonicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ultrasonic>
      _instance;
} _Ultrasonic_default_instance_;
class InfraredDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Infrared>
      _instance;
} _Infrared_default_instance_;
class GyroscopeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gyroscope>
      _instance;
} _Gyroscope_default_instance_;
class Encoder_countDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Encoder_count>
      _instance;
} _Encoder_count_default_instance_;
class Encoder_speedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Encoder_speed>
      _instance;
} _Encoder_speed_default_instance_;
class SensorDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorData>
      _instance;
} _SensorData_default_instance_;
}  // namespace robosar_fms
namespace protobuf_robosar_2eproto {
static void InitDefaultsAccelerometer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robosar_fms::_Accelerometer_default_instance_;
    new (ptr) ::robosar_fms::Accelerometer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robosar_fms::Accelerometer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Accelerometer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccelerometer}, {}};

static void InitDefaultsUltrasonic() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robosar_fms::_Ultrasonic_default_instance_;
    new (ptr) ::robosar_fms::Ultrasonic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robosar_fms::Ultrasonic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ultrasonic =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUltrasonic}, {}};

static void InitDefaultsInfrared() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robosar_fms::_Infrared_default_instance_;
    new (ptr) ::robosar_fms::Infrared();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robosar_fms::Infrared::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Infrared =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInfrared}, {}};

static void InitDefaultsGyroscope() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robosar_fms::_Gyroscope_default_instance_;
    new (ptr) ::robosar_fms::Gyroscope();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robosar_fms::Gyroscope::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gyroscope =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGyroscope}, {}};

static void InitDefaultsEncoder_count() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robosar_fms::_Encoder_count_default_instance_;
    new (ptr) ::robosar_fms::Encoder_count();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robosar_fms::Encoder_count::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Encoder_count =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncoder_count}, {}};

static void InitDefaultsEncoder_speed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robosar_fms::_Encoder_speed_default_instance_;
    new (ptr) ::robosar_fms::Encoder_speed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robosar_fms::Encoder_speed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Encoder_speed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncoder_speed}, {}};

static void InitDefaultsSensorData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robosar_fms::_SensorData_default_instance_;
    new (ptr) ::robosar_fms::SensorData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robosar_fms::SensorData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_SensorData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsSensorData}, {
      &protobuf_robosar_2eproto::scc_info_Accelerometer.base,
      &protobuf_robosar_2eproto::scc_info_Gyroscope.base,
      &protobuf_robosar_2eproto::scc_info_Encoder_count.base,
      &protobuf_robosar_2eproto::scc_info_Encoder_speed.base,
      &protobuf_robosar_2eproto::scc_info_Infrared.base,
      &protobuf_robosar_2eproto::scc_info_Ultrasonic.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Accelerometer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ultrasonic.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Infrared.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gyroscope.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Encoder_count.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Encoder_speed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorData.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Accelerometer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Accelerometer, acc_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Accelerometer, acc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Accelerometer, acc_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Ultrasonic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Ultrasonic, sensor_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Ultrasonic, sensor_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Ultrasonic, sensor_c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Ultrasonic, sensor_d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Ultrasonic, sensor_e_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_e_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_f_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_j_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Infrared, sensor_l_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Gyroscope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Gyroscope, gyro_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Gyroscope, gyro_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Gyroscope, gyro_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Encoder_count, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Encoder_count, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Encoder_count, right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Encoder_speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Encoder_speed, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::Encoder_speed, right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::SensorData, timestamp_ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::SensorData, accel_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::SensorData, gyro_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::SensorData, count_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::SensorData, speed_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::SensorData, ir_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosar_fms::SensorData, us_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::robosar_fms::Accelerometer)},
  { 8, -1, sizeof(::robosar_fms::Ultrasonic)},
  { 18, -1, sizeof(::robosar_fms::Infrared)},
  { 35, -1, sizeof(::robosar_fms::Gyroscope)},
  { 43, -1, sizeof(::robosar_fms::Encoder_count)},
  { 50, -1, sizeof(::robosar_fms::Encoder_speed)},
  { 57, -1, sizeof(::robosar_fms::SensorData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::robosar_fms::_Accelerometer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robosar_fms::_Ultrasonic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robosar_fms::_Infrared_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robosar_fms::_Gyroscope_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robosar_fms::_Encoder_count_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robosar_fms::_Encoder_speed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robosar_fms::_SensorData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "robosar.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rrobosar.proto\022\013robosar_fms\"<\n\rAccelero"
      "meter\022\r\n\005acc_x\030\001 \001(\001\022\r\n\005acc_y\030\002 \001(\001\022\r\n\005a"
      "cc_z\030\003 \001(\001\"f\n\nUltrasonic\022\020\n\010sensor_a\030\001 \001"
      "(\r\022\020\n\010sensor_b\030\002 \001(\r\022\020\n\010sensor_c\030\003 \001(\r\022\020"
      "\n\010sensor_d\030\004 \001(\r\022\020\n\010sensor_e\030\005 \001(\r\"\342\001\n\010I"
      "nfrared\022\020\n\010sensor_a\030\001 \001(\r\022\020\n\010sensor_b\030\002 "
      "\001(\r\022\020\n\010sensor_c\030\003 \001(\r\022\020\n\010sensor_d\030\004 \001(\r\022"
      "\020\n\010sensor_e\030\005 \001(\r\022\020\n\010sensor_f\030\006 \001(\r\022\020\n\010s"
      "ensor_g\030\007 \001(\r\022\020\n\010sensor_h\030\010 \001(\r\022\020\n\010senso"
      "r_i\030\t \001(\r\022\020\n\010sensor_j\030\n \001(\r\022\020\n\010sensor_k\030"
      "\013 \001(\r\022\020\n\010sensor_l\030\014 \001(\r\";\n\tGyroscope\022\016\n\006"
      "gyro_x\030\001 \001(\001\022\016\n\006gyro_y\030\002 \001(\001\022\016\n\006gyro_z\030\003"
      " \001(\001\",\n\rEncoder_count\022\014\n\004left\030\001 \001(\004\022\r\n\005r"
      "ight\030\002 \001(\004\",\n\rEncoder_speed\022\014\n\004left\030\001 \001("
      "\004\022\r\n\005right\030\002 \001(\004\"\257\002\n\nSensorData\022\024\n\014times"
      "tamp_ns\030\001 \001(\004\022.\n\naccel_data\030\002 \001(\0132\032.robo"
      "sar_fms.Accelerometer\022)\n\tgyro_data\030\003 \001(\013"
      "2\026.robosar_fms.Gyroscope\022.\n\ncount_data\030\004"
      " \001(\0132\032.robosar_fms.Encoder_count\022.\n\nspee"
      "d_data\030\005 \001(\0132\032.robosar_fms.Encoder_speed"
      "\022&\n\007ir_data\030\006 \001(\0132\025.robosar_fms.Infrared"
      "\022(\n\007us_data\030\007 \001(\0132\027.robosar_fms.Ultrason"
      "icb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 890);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robosar.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_robosar_2eproto
namespace robosar_fms {

// ===================================================================

void Accelerometer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Accelerometer::kAccXFieldNumber;
const int Accelerometer::kAccYFieldNumber;
const int Accelerometer::kAccZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Accelerometer::Accelerometer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robosar_2eproto::scc_info_Accelerometer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosar_fms.Accelerometer)
}
Accelerometer::Accelerometer(const Accelerometer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_x_, &from.acc_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc_z_) -
    reinterpret_cast<char*>(&acc_x_)) + sizeof(acc_z_));
  // @@protoc_insertion_point(copy_constructor:robosar_fms.Accelerometer)
}

void Accelerometer::SharedCtor() {
  ::memset(&acc_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_z_) -
      reinterpret_cast<char*>(&acc_x_)) + sizeof(acc_z_));
}

Accelerometer::~Accelerometer() {
  // @@protoc_insertion_point(destructor:robosar_fms.Accelerometer)
  SharedDtor();
}

void Accelerometer::SharedDtor() {
}

void Accelerometer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Accelerometer::descriptor() {
  ::protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Accelerometer& Accelerometer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robosar_2eproto::scc_info_Accelerometer.base);
  return *internal_default_instance();
}


void Accelerometer::Clear() {
// @@protoc_insertion_point(message_clear_start:robosar_fms.Accelerometer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_z_) -
      reinterpret_cast<char*>(&acc_x_)) + sizeof(acc_z_));
  _internal_metadata_.Clear();
}

bool Accelerometer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosar_fms.Accelerometer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double acc_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acc_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acc_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosar_fms.Accelerometer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosar_fms.Accelerometer)
  return false;
#undef DO_
}

void Accelerometer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosar_fms.Accelerometer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double acc_x = 1;
  if (this->acc_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_x(), output);
  }

  // double acc_y = 2;
  if (this->acc_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->acc_y(), output);
  }

  // double acc_z = 3;
  if (this->acc_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->acc_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robosar_fms.Accelerometer)
}

::google::protobuf::uint8* Accelerometer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robosar_fms.Accelerometer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double acc_x = 1;
  if (this->acc_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_x(), target);
  }

  // double acc_y = 2;
  if (this->acc_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->acc_y(), target);
  }

  // double acc_z = 3;
  if (this->acc_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->acc_z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosar_fms.Accelerometer)
  return target;
}

size_t Accelerometer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robosar_fms.Accelerometer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double acc_x = 1;
  if (this->acc_x() != 0) {
    total_size += 1 + 8;
  }

  // double acc_y = 2;
  if (this->acc_y() != 0) {
    total_size += 1 + 8;
  }

  // double acc_z = 3;
  if (this->acc_z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accelerometer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robosar_fms.Accelerometer)
  GOOGLE_DCHECK_NE(&from, this);
  const Accelerometer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Accelerometer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robosar_fms.Accelerometer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robosar_fms.Accelerometer)
    MergeFrom(*source);
  }
}

void Accelerometer::MergeFrom(const Accelerometer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robosar_fms.Accelerometer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acc_x() != 0) {
    set_acc_x(from.acc_x());
  }
  if (from.acc_y() != 0) {
    set_acc_y(from.acc_y());
  }
  if (from.acc_z() != 0) {
    set_acc_z(from.acc_z());
  }
}

void Accelerometer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robosar_fms.Accelerometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accelerometer::CopyFrom(const Accelerometer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robosar_fms.Accelerometer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accelerometer::IsInitialized() const {
  return true;
}

void Accelerometer::Swap(Accelerometer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Accelerometer::InternalSwap(Accelerometer* other) {
  using std::swap;
  swap(acc_x_, other->acc_x_);
  swap(acc_y_, other->acc_y_);
  swap(acc_z_, other->acc_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Accelerometer::GetMetadata() const {
  protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ultrasonic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ultrasonic::kSensorAFieldNumber;
const int Ultrasonic::kSensorBFieldNumber;
const int Ultrasonic::kSensorCFieldNumber;
const int Ultrasonic::kSensorDFieldNumber;
const int Ultrasonic::kSensorEFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ultrasonic::Ultrasonic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robosar_2eproto::scc_info_Ultrasonic.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosar_fms.Ultrasonic)
}
Ultrasonic::Ultrasonic(const Ultrasonic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_a_, &from.sensor_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_e_) -
    reinterpret_cast<char*>(&sensor_a_)) + sizeof(sensor_e_));
  // @@protoc_insertion_point(copy_constructor:robosar_fms.Ultrasonic)
}

void Ultrasonic::SharedCtor() {
  ::memset(&sensor_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_e_) -
      reinterpret_cast<char*>(&sensor_a_)) + sizeof(sensor_e_));
}

Ultrasonic::~Ultrasonic() {
  // @@protoc_insertion_point(destructor:robosar_fms.Ultrasonic)
  SharedDtor();
}

void Ultrasonic::SharedDtor() {
}

void Ultrasonic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ultrasonic::descriptor() {
  ::protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ultrasonic& Ultrasonic::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robosar_2eproto::scc_info_Ultrasonic.base);
  return *internal_default_instance();
}


void Ultrasonic::Clear() {
// @@protoc_insertion_point(message_clear_start:robosar_fms.Ultrasonic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sensor_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_e_) -
      reinterpret_cast<char*>(&sensor_a_)) + sizeof(sensor_e_));
  _internal_metadata_.Clear();
}

bool Ultrasonic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosar_fms.Ultrasonic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sensor_a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_c = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_e = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosar_fms.Ultrasonic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosar_fms.Ultrasonic)
  return false;
#undef DO_
}

void Ultrasonic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosar_fms.Ultrasonic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor_a = 1;
  if (this->sensor_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensor_a(), output);
  }

  // uint32 sensor_b = 2;
  if (this->sensor_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sensor_b(), output);
  }

  // uint32 sensor_c = 3;
  if (this->sensor_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor_c(), output);
  }

  // uint32 sensor_d = 4;
  if (this->sensor_d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sensor_d(), output);
  }

  // uint32 sensor_e = 5;
  if (this->sensor_e() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sensor_e(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robosar_fms.Ultrasonic)
}

::google::protobuf::uint8* Ultrasonic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robosar_fms.Ultrasonic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor_a = 1;
  if (this->sensor_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensor_a(), target);
  }

  // uint32 sensor_b = 2;
  if (this->sensor_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sensor_b(), target);
  }

  // uint32 sensor_c = 3;
  if (this->sensor_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor_c(), target);
  }

  // uint32 sensor_d = 4;
  if (this->sensor_d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sensor_d(), target);
  }

  // uint32 sensor_e = 5;
  if (this->sensor_e() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sensor_e(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosar_fms.Ultrasonic)
  return target;
}

size_t Ultrasonic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robosar_fms.Ultrasonic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 sensor_a = 1;
  if (this->sensor_a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_a());
  }

  // uint32 sensor_b = 2;
  if (this->sensor_b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_b());
  }

  // uint32 sensor_c = 3;
  if (this->sensor_c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_c());
  }

  // uint32 sensor_d = 4;
  if (this->sensor_d() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_d());
  }

  // uint32 sensor_e = 5;
  if (this->sensor_e() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_e());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ultrasonic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robosar_fms.Ultrasonic)
  GOOGLE_DCHECK_NE(&from, this);
  const Ultrasonic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ultrasonic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robosar_fms.Ultrasonic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robosar_fms.Ultrasonic)
    MergeFrom(*source);
  }
}

void Ultrasonic::MergeFrom(const Ultrasonic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robosar_fms.Ultrasonic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_a() != 0) {
    set_sensor_a(from.sensor_a());
  }
  if (from.sensor_b() != 0) {
    set_sensor_b(from.sensor_b());
  }
  if (from.sensor_c() != 0) {
    set_sensor_c(from.sensor_c());
  }
  if (from.sensor_d() != 0) {
    set_sensor_d(from.sensor_d());
  }
  if (from.sensor_e() != 0) {
    set_sensor_e(from.sensor_e());
  }
}

void Ultrasonic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robosar_fms.Ultrasonic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ultrasonic::CopyFrom(const Ultrasonic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robosar_fms.Ultrasonic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ultrasonic::IsInitialized() const {
  return true;
}

void Ultrasonic::Swap(Ultrasonic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ultrasonic::InternalSwap(Ultrasonic* other) {
  using std::swap;
  swap(sensor_a_, other->sensor_a_);
  swap(sensor_b_, other->sensor_b_);
  swap(sensor_c_, other->sensor_c_);
  swap(sensor_d_, other->sensor_d_);
  swap(sensor_e_, other->sensor_e_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ultrasonic::GetMetadata() const {
  protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Infrared::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Infrared::kSensorAFieldNumber;
const int Infrared::kSensorBFieldNumber;
const int Infrared::kSensorCFieldNumber;
const int Infrared::kSensorDFieldNumber;
const int Infrared::kSensorEFieldNumber;
const int Infrared::kSensorFFieldNumber;
const int Infrared::kSensorGFieldNumber;
const int Infrared::kSensorHFieldNumber;
const int Infrared::kSensorIFieldNumber;
const int Infrared::kSensorJFieldNumber;
const int Infrared::kSensorKFieldNumber;
const int Infrared::kSensorLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Infrared::Infrared()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robosar_2eproto::scc_info_Infrared.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosar_fms.Infrared)
}
Infrared::Infrared(const Infrared& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_a_, &from.sensor_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_l_) -
    reinterpret_cast<char*>(&sensor_a_)) + sizeof(sensor_l_));
  // @@protoc_insertion_point(copy_constructor:robosar_fms.Infrared)
}

void Infrared::SharedCtor() {
  ::memset(&sensor_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_l_) -
      reinterpret_cast<char*>(&sensor_a_)) + sizeof(sensor_l_));
}

Infrared::~Infrared() {
  // @@protoc_insertion_point(destructor:robosar_fms.Infrared)
  SharedDtor();
}

void Infrared::SharedDtor() {
}

void Infrared::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Infrared::descriptor() {
  ::protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Infrared& Infrared::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robosar_2eproto::scc_info_Infrared.base);
  return *internal_default_instance();
}


void Infrared::Clear() {
// @@protoc_insertion_point(message_clear_start:robosar_fms.Infrared)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sensor_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_l_) -
      reinterpret_cast<char*>(&sensor_a_)) + sizeof(sensor_l_));
  _internal_metadata_.Clear();
}

bool Infrared::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosar_fms.Infrared)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sensor_a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_c = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_e = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_f = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_g = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_h = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_i = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_j = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_j_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_k = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sensor_l = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosar_fms.Infrared)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosar_fms.Infrared)
  return false;
#undef DO_
}

void Infrared::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosar_fms.Infrared)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor_a = 1;
  if (this->sensor_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensor_a(), output);
  }

  // uint32 sensor_b = 2;
  if (this->sensor_b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sensor_b(), output);
  }

  // uint32 sensor_c = 3;
  if (this->sensor_c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sensor_c(), output);
  }

  // uint32 sensor_d = 4;
  if (this->sensor_d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sensor_d(), output);
  }

  // uint32 sensor_e = 5;
  if (this->sensor_e() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sensor_e(), output);
  }

  // uint32 sensor_f = 6;
  if (this->sensor_f() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sensor_f(), output);
  }

  // uint32 sensor_g = 7;
  if (this->sensor_g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sensor_g(), output);
  }

  // uint32 sensor_h = 8;
  if (this->sensor_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sensor_h(), output);
  }

  // uint32 sensor_i = 9;
  if (this->sensor_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sensor_i(), output);
  }

  // uint32 sensor_j = 10;
  if (this->sensor_j() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sensor_j(), output);
  }

  // uint32 sensor_k = 11;
  if (this->sensor_k() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sensor_k(), output);
  }

  // uint32 sensor_l = 12;
  if (this->sensor_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sensor_l(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robosar_fms.Infrared)
}

::google::protobuf::uint8* Infrared::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robosar_fms.Infrared)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensor_a = 1;
  if (this->sensor_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensor_a(), target);
  }

  // uint32 sensor_b = 2;
  if (this->sensor_b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sensor_b(), target);
  }

  // uint32 sensor_c = 3;
  if (this->sensor_c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sensor_c(), target);
  }

  // uint32 sensor_d = 4;
  if (this->sensor_d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sensor_d(), target);
  }

  // uint32 sensor_e = 5;
  if (this->sensor_e() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sensor_e(), target);
  }

  // uint32 sensor_f = 6;
  if (this->sensor_f() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sensor_f(), target);
  }

  // uint32 sensor_g = 7;
  if (this->sensor_g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sensor_g(), target);
  }

  // uint32 sensor_h = 8;
  if (this->sensor_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sensor_h(), target);
  }

  // uint32 sensor_i = 9;
  if (this->sensor_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sensor_i(), target);
  }

  // uint32 sensor_j = 10;
  if (this->sensor_j() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sensor_j(), target);
  }

  // uint32 sensor_k = 11;
  if (this->sensor_k() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sensor_k(), target);
  }

  // uint32 sensor_l = 12;
  if (this->sensor_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sensor_l(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosar_fms.Infrared)
  return target;
}

size_t Infrared::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robosar_fms.Infrared)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 sensor_a = 1;
  if (this->sensor_a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_a());
  }

  // uint32 sensor_b = 2;
  if (this->sensor_b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_b());
  }

  // uint32 sensor_c = 3;
  if (this->sensor_c() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_c());
  }

  // uint32 sensor_d = 4;
  if (this->sensor_d() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_d());
  }

  // uint32 sensor_e = 5;
  if (this->sensor_e() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_e());
  }

  // uint32 sensor_f = 6;
  if (this->sensor_f() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_f());
  }

  // uint32 sensor_g = 7;
  if (this->sensor_g() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_g());
  }

  // uint32 sensor_h = 8;
  if (this->sensor_h() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_h());
  }

  // uint32 sensor_i = 9;
  if (this->sensor_i() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_i());
  }

  // uint32 sensor_j = 10;
  if (this->sensor_j() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_j());
  }

  // uint32 sensor_k = 11;
  if (this->sensor_k() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_k());
  }

  // uint32 sensor_l = 12;
  if (this->sensor_l() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensor_l());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Infrared::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robosar_fms.Infrared)
  GOOGLE_DCHECK_NE(&from, this);
  const Infrared* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Infrared>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robosar_fms.Infrared)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robosar_fms.Infrared)
    MergeFrom(*source);
  }
}

void Infrared::MergeFrom(const Infrared& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robosar_fms.Infrared)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_a() != 0) {
    set_sensor_a(from.sensor_a());
  }
  if (from.sensor_b() != 0) {
    set_sensor_b(from.sensor_b());
  }
  if (from.sensor_c() != 0) {
    set_sensor_c(from.sensor_c());
  }
  if (from.sensor_d() != 0) {
    set_sensor_d(from.sensor_d());
  }
  if (from.sensor_e() != 0) {
    set_sensor_e(from.sensor_e());
  }
  if (from.sensor_f() != 0) {
    set_sensor_f(from.sensor_f());
  }
  if (from.sensor_g() != 0) {
    set_sensor_g(from.sensor_g());
  }
  if (from.sensor_h() != 0) {
    set_sensor_h(from.sensor_h());
  }
  if (from.sensor_i() != 0) {
    set_sensor_i(from.sensor_i());
  }
  if (from.sensor_j() != 0) {
    set_sensor_j(from.sensor_j());
  }
  if (from.sensor_k() != 0) {
    set_sensor_k(from.sensor_k());
  }
  if (from.sensor_l() != 0) {
    set_sensor_l(from.sensor_l());
  }
}

void Infrared::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robosar_fms.Infrared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Infrared::CopyFrom(const Infrared& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robosar_fms.Infrared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Infrared::IsInitialized() const {
  return true;
}

void Infrared::Swap(Infrared* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Infrared::InternalSwap(Infrared* other) {
  using std::swap;
  swap(sensor_a_, other->sensor_a_);
  swap(sensor_b_, other->sensor_b_);
  swap(sensor_c_, other->sensor_c_);
  swap(sensor_d_, other->sensor_d_);
  swap(sensor_e_, other->sensor_e_);
  swap(sensor_f_, other->sensor_f_);
  swap(sensor_g_, other->sensor_g_);
  swap(sensor_h_, other->sensor_h_);
  swap(sensor_i_, other->sensor_i_);
  swap(sensor_j_, other->sensor_j_);
  swap(sensor_k_, other->sensor_k_);
  swap(sensor_l_, other->sensor_l_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Infrared::GetMetadata() const {
  protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gyroscope::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gyroscope::kGyroXFieldNumber;
const int Gyroscope::kGyroYFieldNumber;
const int Gyroscope::kGyroZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gyroscope::Gyroscope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robosar_2eproto::scc_info_Gyroscope.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosar_fms.Gyroscope)
}
Gyroscope::Gyroscope(const Gyroscope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gyro_x_, &from.gyro_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&gyro_z_) -
    reinterpret_cast<char*>(&gyro_x_)) + sizeof(gyro_z_));
  // @@protoc_insertion_point(copy_constructor:robosar_fms.Gyroscope)
}

void Gyroscope::SharedCtor() {
  ::memset(&gyro_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gyro_z_) -
      reinterpret_cast<char*>(&gyro_x_)) + sizeof(gyro_z_));
}

Gyroscope::~Gyroscope() {
  // @@protoc_insertion_point(destructor:robosar_fms.Gyroscope)
  SharedDtor();
}

void Gyroscope::SharedDtor() {
}

void Gyroscope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gyroscope::descriptor() {
  ::protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gyroscope& Gyroscope::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robosar_2eproto::scc_info_Gyroscope.base);
  return *internal_default_instance();
}


void Gyroscope::Clear() {
// @@protoc_insertion_point(message_clear_start:robosar_fms.Gyroscope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gyro_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gyro_z_) -
      reinterpret_cast<char*>(&gyro_x_)) + sizeof(gyro_z_));
  _internal_metadata_.Clear();
}

bool Gyroscope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosar_fms.Gyroscope)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double gyro_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gyro_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gyro_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosar_fms.Gyroscope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosar_fms.Gyroscope)
  return false;
#undef DO_
}

void Gyroscope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosar_fms.Gyroscope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double gyro_x = 1;
  if (this->gyro_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->gyro_x(), output);
  }

  // double gyro_y = 2;
  if (this->gyro_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gyro_y(), output);
  }

  // double gyro_z = 3;
  if (this->gyro_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gyro_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robosar_fms.Gyroscope)
}

::google::protobuf::uint8* Gyroscope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robosar_fms.Gyroscope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double gyro_x = 1;
  if (this->gyro_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->gyro_x(), target);
  }

  // double gyro_y = 2;
  if (this->gyro_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gyro_y(), target);
  }

  // double gyro_z = 3;
  if (this->gyro_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gyro_z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosar_fms.Gyroscope)
  return target;
}

size_t Gyroscope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robosar_fms.Gyroscope)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double gyro_x = 1;
  if (this->gyro_x() != 0) {
    total_size += 1 + 8;
  }

  // double gyro_y = 2;
  if (this->gyro_y() != 0) {
    total_size += 1 + 8;
  }

  // double gyro_z = 3;
  if (this->gyro_z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gyroscope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robosar_fms.Gyroscope)
  GOOGLE_DCHECK_NE(&from, this);
  const Gyroscope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gyroscope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robosar_fms.Gyroscope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robosar_fms.Gyroscope)
    MergeFrom(*source);
  }
}

void Gyroscope::MergeFrom(const Gyroscope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robosar_fms.Gyroscope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gyro_x() != 0) {
    set_gyro_x(from.gyro_x());
  }
  if (from.gyro_y() != 0) {
    set_gyro_y(from.gyro_y());
  }
  if (from.gyro_z() != 0) {
    set_gyro_z(from.gyro_z());
  }
}

void Gyroscope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robosar_fms.Gyroscope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gyroscope::CopyFrom(const Gyroscope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robosar_fms.Gyroscope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gyroscope::IsInitialized() const {
  return true;
}

void Gyroscope::Swap(Gyroscope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gyroscope::InternalSwap(Gyroscope* other) {
  using std::swap;
  swap(gyro_x_, other->gyro_x_);
  swap(gyro_y_, other->gyro_y_);
  swap(gyro_z_, other->gyro_z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gyroscope::GetMetadata() const {
  protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Encoder_count::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Encoder_count::kLeftFieldNumber;
const int Encoder_count::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Encoder_count::Encoder_count()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robosar_2eproto::scc_info_Encoder_count.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosar_fms.Encoder_count)
}
Encoder_count::Encoder_count(const Encoder_count& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:robosar_fms.Encoder_count)
}

void Encoder_count::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

Encoder_count::~Encoder_count() {
  // @@protoc_insertion_point(destructor:robosar_fms.Encoder_count)
  SharedDtor();
}

void Encoder_count::SharedDtor() {
}

void Encoder_count::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Encoder_count::descriptor() {
  ::protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Encoder_count& Encoder_count::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robosar_2eproto::scc_info_Encoder_count.base);
  return *internal_default_instance();
}


void Encoder_count::Clear() {
// @@protoc_insertion_point(message_clear_start:robosar_fms.Encoder_count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_)) + sizeof(right_));
  _internal_metadata_.Clear();
}

bool Encoder_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosar_fms.Encoder_count)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosar_fms.Encoder_count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosar_fms.Encoder_count)
  return false;
#undef DO_
}

void Encoder_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosar_fms.Encoder_count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->left(), output);
  }

  // uint64 right = 2;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->right(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robosar_fms.Encoder_count)
}

::google::protobuf::uint8* Encoder_count::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robosar_fms.Encoder_count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->left(), target);
  }

  // uint64 right = 2;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->right(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosar_fms.Encoder_count)
  return target;
}

size_t Encoder_count::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robosar_fms.Encoder_count)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 left = 1;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->left());
  }

  // uint64 right = 2;
  if (this->right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->right());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Encoder_count::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robosar_fms.Encoder_count)
  GOOGLE_DCHECK_NE(&from, this);
  const Encoder_count* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Encoder_count>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robosar_fms.Encoder_count)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robosar_fms.Encoder_count)
    MergeFrom(*source);
  }
}

void Encoder_count::MergeFrom(const Encoder_count& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robosar_fms.Encoder_count)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
}

void Encoder_count::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robosar_fms.Encoder_count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Encoder_count::CopyFrom(const Encoder_count& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robosar_fms.Encoder_count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Encoder_count::IsInitialized() const {
  return true;
}

void Encoder_count::Swap(Encoder_count* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Encoder_count::InternalSwap(Encoder_count* other) {
  using std::swap;
  swap(left_, other->left_);
  swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Encoder_count::GetMetadata() const {
  protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Encoder_speed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Encoder_speed::kLeftFieldNumber;
const int Encoder_speed::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Encoder_speed::Encoder_speed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robosar_2eproto::scc_info_Encoder_speed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosar_fms.Encoder_speed)
}
Encoder_speed::Encoder_speed(const Encoder_speed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:robosar_fms.Encoder_speed)
}

void Encoder_speed::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

Encoder_speed::~Encoder_speed() {
  // @@protoc_insertion_point(destructor:robosar_fms.Encoder_speed)
  SharedDtor();
}

void Encoder_speed::SharedDtor() {
}

void Encoder_speed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Encoder_speed::descriptor() {
  ::protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Encoder_speed& Encoder_speed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robosar_2eproto::scc_info_Encoder_speed.base);
  return *internal_default_instance();
}


void Encoder_speed::Clear() {
// @@protoc_insertion_point(message_clear_start:robosar_fms.Encoder_speed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_)) + sizeof(right_));
  _internal_metadata_.Clear();
}

bool Encoder_speed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosar_fms.Encoder_speed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosar_fms.Encoder_speed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosar_fms.Encoder_speed)
  return false;
#undef DO_
}

void Encoder_speed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosar_fms.Encoder_speed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->left(), output);
  }

  // uint64 right = 2;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->right(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robosar_fms.Encoder_speed)
}

::google::protobuf::uint8* Encoder_speed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robosar_fms.Encoder_speed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->left(), target);
  }

  // uint64 right = 2;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->right(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosar_fms.Encoder_speed)
  return target;
}

size_t Encoder_speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robosar_fms.Encoder_speed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 left = 1;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->left());
  }

  // uint64 right = 2;
  if (this->right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->right());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Encoder_speed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robosar_fms.Encoder_speed)
  GOOGLE_DCHECK_NE(&from, this);
  const Encoder_speed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Encoder_speed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robosar_fms.Encoder_speed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robosar_fms.Encoder_speed)
    MergeFrom(*source);
  }
}

void Encoder_speed::MergeFrom(const Encoder_speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robosar_fms.Encoder_speed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
}

void Encoder_speed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robosar_fms.Encoder_speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Encoder_speed::CopyFrom(const Encoder_speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robosar_fms.Encoder_speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Encoder_speed::IsInitialized() const {
  return true;
}

void Encoder_speed::Swap(Encoder_speed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Encoder_speed::InternalSwap(Encoder_speed* other) {
  using std::swap;
  swap(left_, other->left_);
  swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Encoder_speed::GetMetadata() const {
  protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorData::InitAsDefaultInstance() {
  ::robosar_fms::_SensorData_default_instance_._instance.get_mutable()->accel_data_ = const_cast< ::robosar_fms::Accelerometer*>(
      ::robosar_fms::Accelerometer::internal_default_instance());
  ::robosar_fms::_SensorData_default_instance_._instance.get_mutable()->gyro_data_ = const_cast< ::robosar_fms::Gyroscope*>(
      ::robosar_fms::Gyroscope::internal_default_instance());
  ::robosar_fms::_SensorData_default_instance_._instance.get_mutable()->count_data_ = const_cast< ::robosar_fms::Encoder_count*>(
      ::robosar_fms::Encoder_count::internal_default_instance());
  ::robosar_fms::_SensorData_default_instance_._instance.get_mutable()->speed_data_ = const_cast< ::robosar_fms::Encoder_speed*>(
      ::robosar_fms::Encoder_speed::internal_default_instance());
  ::robosar_fms::_SensorData_default_instance_._instance.get_mutable()->ir_data_ = const_cast< ::robosar_fms::Infrared*>(
      ::robosar_fms::Infrared::internal_default_instance());
  ::robosar_fms::_SensorData_default_instance_._instance.get_mutable()->us_data_ = const_cast< ::robosar_fms::Ultrasonic*>(
      ::robosar_fms::Ultrasonic::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorData::kTimestampNsFieldNumber;
const int SensorData::kAccelDataFieldNumber;
const int SensorData::kGyroDataFieldNumber;
const int SensorData::kCountDataFieldNumber;
const int SensorData::kSpeedDataFieldNumber;
const int SensorData::kIrDataFieldNumber;
const int SensorData::kUsDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorData::SensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_robosar_2eproto::scc_info_SensorData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosar_fms.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_accel_data()) {
    accel_data_ = new ::robosar_fms::Accelerometer(*from.accel_data_);
  } else {
    accel_data_ = NULL;
  }
  if (from.has_gyro_data()) {
    gyro_data_ = new ::robosar_fms::Gyroscope(*from.gyro_data_);
  } else {
    gyro_data_ = NULL;
  }
  if (from.has_count_data()) {
    count_data_ = new ::robosar_fms::Encoder_count(*from.count_data_);
  } else {
    count_data_ = NULL;
  }
  if (from.has_speed_data()) {
    speed_data_ = new ::robosar_fms::Encoder_speed(*from.speed_data_);
  } else {
    speed_data_ = NULL;
  }
  if (from.has_ir_data()) {
    ir_data_ = new ::robosar_fms::Infrared(*from.ir_data_);
  } else {
    ir_data_ = NULL;
  }
  if (from.has_us_data()) {
    us_data_ = new ::robosar_fms::Ultrasonic(*from.us_data_);
  } else {
    us_data_ = NULL;
  }
  timestamp_ns_ = from.timestamp_ns_;
  // @@protoc_insertion_point(copy_constructor:robosar_fms.SensorData)
}

void SensorData::SharedCtor() {
  ::memset(&accel_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_ns_) -
      reinterpret_cast<char*>(&accel_data_)) + sizeof(timestamp_ns_));
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:robosar_fms.SensorData)
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != internal_default_instance()) delete accel_data_;
  if (this != internal_default_instance()) delete gyro_data_;
  if (this != internal_default_instance()) delete count_data_;
  if (this != internal_default_instance()) delete speed_data_;
  if (this != internal_default_instance()) delete ir_data_;
  if (this != internal_default_instance()) delete us_data_;
}

void SensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorData::descriptor() {
  ::protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorData& SensorData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_robosar_2eproto::scc_info_SensorData.base);
  return *internal_default_instance();
}


void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:robosar_fms.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && accel_data_ != NULL) {
    delete accel_data_;
  }
  accel_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && gyro_data_ != NULL) {
    delete gyro_data_;
  }
  gyro_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && count_data_ != NULL) {
    delete count_data_;
  }
  count_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && speed_data_ != NULL) {
    delete speed_data_;
  }
  speed_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && ir_data_ != NULL) {
    delete ir_data_;
  }
  ir_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && us_data_ != NULL) {
    delete us_data_;
  }
  us_data_ = NULL;
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosar_fms.SensorData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp_ns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_ns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .robosar_fms.Accelerometer accel_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accel_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .robosar_fms.Gyroscope gyro_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gyro_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .robosar_fms.Encoder_count count_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_count_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .robosar_fms.Encoder_speed speed_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .robosar_fms.Infrared ir_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ir_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .robosar_fms.Ultrasonic us_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_us_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosar_fms.SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosar_fms.SensorData)
  return false;
#undef DO_
}

void SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosar_fms.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp_ns = 1;
  if (this->timestamp_ns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp_ns(), output);
  }

  // .robosar_fms.Accelerometer accel_data = 2;
  if (this->has_accel_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_accel_data(), output);
  }

  // .robosar_fms.Gyroscope gyro_data = 3;
  if (this->has_gyro_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_gyro_data(), output);
  }

  // .robosar_fms.Encoder_count count_data = 4;
  if (this->has_count_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_count_data(), output);
  }

  // .robosar_fms.Encoder_speed speed_data = 5;
  if (this->has_speed_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_speed_data(), output);
  }

  // .robosar_fms.Infrared ir_data = 6;
  if (this->has_ir_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_ir_data(), output);
  }

  // .robosar_fms.Ultrasonic us_data = 7;
  if (this->has_us_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_us_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:robosar_fms.SensorData)
}

::google::protobuf::uint8* SensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robosar_fms.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp_ns = 1;
  if (this->timestamp_ns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp_ns(), target);
  }

  // .robosar_fms.Accelerometer accel_data = 2;
  if (this->has_accel_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_accel_data(), deterministic, target);
  }

  // .robosar_fms.Gyroscope gyro_data = 3;
  if (this->has_gyro_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_gyro_data(), deterministic, target);
  }

  // .robosar_fms.Encoder_count count_data = 4;
  if (this->has_count_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_count_data(), deterministic, target);
  }

  // .robosar_fms.Encoder_speed speed_data = 5;
  if (this->has_speed_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_speed_data(), deterministic, target);
  }

  // .robosar_fms.Infrared ir_data = 6;
  if (this->has_ir_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_ir_data(), deterministic, target);
  }

  // .robosar_fms.Ultrasonic us_data = 7;
  if (this->has_us_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_us_data(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosar_fms.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robosar_fms.SensorData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .robosar_fms.Accelerometer accel_data = 2;
  if (this->has_accel_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *accel_data_);
  }

  // .robosar_fms.Gyroscope gyro_data = 3;
  if (this->has_gyro_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gyro_data_);
  }

  // .robosar_fms.Encoder_count count_data = 4;
  if (this->has_count_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *count_data_);
  }

  // .robosar_fms.Encoder_speed speed_data = 5;
  if (this->has_speed_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *speed_data_);
  }

  // .robosar_fms.Infrared ir_data = 6;
  if (this->has_ir_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ir_data_);
  }

  // .robosar_fms.Ultrasonic us_data = 7;
  if (this->has_us_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *us_data_);
  }

  // uint64 timestamp_ns = 1;
  if (this->timestamp_ns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_ns());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robosar_fms.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robosar_fms.SensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robosar_fms.SensorData)
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robosar_fms.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accel_data()) {
    mutable_accel_data()->::robosar_fms::Accelerometer::MergeFrom(from.accel_data());
  }
  if (from.has_gyro_data()) {
    mutable_gyro_data()->::robosar_fms::Gyroscope::MergeFrom(from.gyro_data());
  }
  if (from.has_count_data()) {
    mutable_count_data()->::robosar_fms::Encoder_count::MergeFrom(from.count_data());
  }
  if (from.has_speed_data()) {
    mutable_speed_data()->::robosar_fms::Encoder_speed::MergeFrom(from.speed_data());
  }
  if (from.has_ir_data()) {
    mutable_ir_data()->::robosar_fms::Infrared::MergeFrom(from.ir_data());
  }
  if (from.has_us_data()) {
    mutable_us_data()->::robosar_fms::Ultrasonic::MergeFrom(from.us_data());
  }
  if (from.timestamp_ns() != 0) {
    set_timestamp_ns(from.timestamp_ns());
  }
}

void SensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robosar_fms.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robosar_fms.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::Swap(SensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  swap(accel_data_, other->accel_data_);
  swap(gyro_data_, other->gyro_data_);
  swap(count_data_, other->count_data_);
  swap(speed_data_, other->speed_data_);
  swap(ir_data_, other->ir_data_);
  swap(us_data_, other->us_data_);
  swap(timestamp_ns_, other->timestamp_ns_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  protobuf_robosar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_robosar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace robosar_fms
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robosar_fms::Accelerometer* Arena::CreateMaybeMessage< ::robosar_fms::Accelerometer >(Arena* arena) {
  return Arena::CreateInternal< ::robosar_fms::Accelerometer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robosar_fms::Ultrasonic* Arena::CreateMaybeMessage< ::robosar_fms::Ultrasonic >(Arena* arena) {
  return Arena::CreateInternal< ::robosar_fms::Ultrasonic >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robosar_fms::Infrared* Arena::CreateMaybeMessage< ::robosar_fms::Infrared >(Arena* arena) {
  return Arena::CreateInternal< ::robosar_fms::Infrared >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robosar_fms::Gyroscope* Arena::CreateMaybeMessage< ::robosar_fms::Gyroscope >(Arena* arena) {
  return Arena::CreateInternal< ::robosar_fms::Gyroscope >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robosar_fms::Encoder_count* Arena::CreateMaybeMessage< ::robosar_fms::Encoder_count >(Arena* arena) {
  return Arena::CreateInternal< ::robosar_fms::Encoder_count >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robosar_fms::Encoder_speed* Arena::CreateMaybeMessage< ::robosar_fms::Encoder_speed >(Arena* arena) {
  return Arena::CreateInternal< ::robosar_fms::Encoder_speed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robosar_fms::SensorData* Arena::CreateMaybeMessage< ::robosar_fms::SensorData >(Arena* arena) {
  return Arena::CreateInternal< ::robosar_fms::SensorData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
