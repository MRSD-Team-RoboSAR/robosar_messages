// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robosar.proto

#ifndef PROTOBUF_INCLUDED_robosar_2eproto
#define PROTOBUF_INCLUDED_robosar_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_robosar_2eproto 

namespace protobuf_robosar_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_robosar_2eproto
namespace robosar_fms {
class Accelerometer;
class AccelerometerDefaultTypeInternal;
extern AccelerometerDefaultTypeInternal _Accelerometer_default_instance_;
class Encoder_count;
class Encoder_countDefaultTypeInternal;
extern Encoder_countDefaultTypeInternal _Encoder_count_default_instance_;
class Encoder_speed;
class Encoder_speedDefaultTypeInternal;
extern Encoder_speedDefaultTypeInternal _Encoder_speed_default_instance_;
class Gyroscope;
class GyroscopeDefaultTypeInternal;
extern GyroscopeDefaultTypeInternal _Gyroscope_default_instance_;
class Infrared;
class InfraredDefaultTypeInternal;
extern InfraredDefaultTypeInternal _Infrared_default_instance_;
class SensorData;
class SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
class Ultrasonic;
class UltrasonicDefaultTypeInternal;
extern UltrasonicDefaultTypeInternal _Ultrasonic_default_instance_;
}  // namespace robosar_fms
namespace google {
namespace protobuf {
template<> ::robosar_fms::Accelerometer* Arena::CreateMaybeMessage<::robosar_fms::Accelerometer>(Arena*);
template<> ::robosar_fms::Encoder_count* Arena::CreateMaybeMessage<::robosar_fms::Encoder_count>(Arena*);
template<> ::robosar_fms::Encoder_speed* Arena::CreateMaybeMessage<::robosar_fms::Encoder_speed>(Arena*);
template<> ::robosar_fms::Gyroscope* Arena::CreateMaybeMessage<::robosar_fms::Gyroscope>(Arena*);
template<> ::robosar_fms::Infrared* Arena::CreateMaybeMessage<::robosar_fms::Infrared>(Arena*);
template<> ::robosar_fms::SensorData* Arena::CreateMaybeMessage<::robosar_fms::SensorData>(Arena*);
template<> ::robosar_fms::Ultrasonic* Arena::CreateMaybeMessage<::robosar_fms::Ultrasonic>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace robosar_fms {

// ===================================================================

class Accelerometer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robosar_fms.Accelerometer) */ {
 public:
  Accelerometer();
  virtual ~Accelerometer();

  Accelerometer(const Accelerometer& from);

  inline Accelerometer& operator=(const Accelerometer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Accelerometer(Accelerometer&& from) noexcept
    : Accelerometer() {
    *this = ::std::move(from);
  }

  inline Accelerometer& operator=(Accelerometer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Accelerometer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Accelerometer* internal_default_instance() {
    return reinterpret_cast<const Accelerometer*>(
               &_Accelerometer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Accelerometer* other);
  friend void swap(Accelerometer& a, Accelerometer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Accelerometer* New() const final {
    return CreateMaybeMessage<Accelerometer>(NULL);
  }

  Accelerometer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Accelerometer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Accelerometer& from);
  void MergeFrom(const Accelerometer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accelerometer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double acc_x = 1;
  bool has_acc_x() const;
  void clear_acc_x();
  static const int kAccXFieldNumber = 1;
  double acc_x() const;
  void set_acc_x(double value);

  // required double acc_y = 2;
  bool has_acc_y() const;
  void clear_acc_y();
  static const int kAccYFieldNumber = 2;
  double acc_y() const;
  void set_acc_y(double value);

  // required double acc_z = 3;
  bool has_acc_z() const;
  void clear_acc_z();
  static const int kAccZFieldNumber = 3;
  double acc_z() const;
  void set_acc_z(double value);

  // @@protoc_insertion_point(class_scope:robosar_fms.Accelerometer)
 private:
  void set_has_acc_x();
  void clear_has_acc_x();
  void set_has_acc_y();
  void clear_has_acc_y();
  void set_has_acc_z();
  void clear_has_acc_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double acc_x_;
  double acc_y_;
  double acc_z_;
  friend struct ::protobuf_robosar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ultrasonic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robosar_fms.Ultrasonic) */ {
 public:
  Ultrasonic();
  virtual ~Ultrasonic();

  Ultrasonic(const Ultrasonic& from);

  inline Ultrasonic& operator=(const Ultrasonic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ultrasonic(Ultrasonic&& from) noexcept
    : Ultrasonic() {
    *this = ::std::move(from);
  }

  inline Ultrasonic& operator=(Ultrasonic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ultrasonic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ultrasonic* internal_default_instance() {
    return reinterpret_cast<const Ultrasonic*>(
               &_Ultrasonic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Ultrasonic* other);
  friend void swap(Ultrasonic& a, Ultrasonic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ultrasonic* New() const final {
    return CreateMaybeMessage<Ultrasonic>(NULL);
  }

  Ultrasonic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ultrasonic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ultrasonic& from);
  void MergeFrom(const Ultrasonic& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ultrasonic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sensor_a = 1;
  bool has_sensor_a() const;
  void clear_sensor_a();
  static const int kSensorAFieldNumber = 1;
  ::google::protobuf::uint32 sensor_a() const;
  void set_sensor_a(::google::protobuf::uint32 value);

  // required uint32 sensor_b = 2;
  bool has_sensor_b() const;
  void clear_sensor_b();
  static const int kSensorBFieldNumber = 2;
  ::google::protobuf::uint32 sensor_b() const;
  void set_sensor_b(::google::protobuf::uint32 value);

  // required uint32 sensor_c = 3;
  bool has_sensor_c() const;
  void clear_sensor_c();
  static const int kSensorCFieldNumber = 3;
  ::google::protobuf::uint32 sensor_c() const;
  void set_sensor_c(::google::protobuf::uint32 value);

  // required uint32 sensor_d = 4;
  bool has_sensor_d() const;
  void clear_sensor_d();
  static const int kSensorDFieldNumber = 4;
  ::google::protobuf::uint32 sensor_d() const;
  void set_sensor_d(::google::protobuf::uint32 value);

  // required uint32 sensor_e = 5;
  bool has_sensor_e() const;
  void clear_sensor_e();
  static const int kSensorEFieldNumber = 5;
  ::google::protobuf::uint32 sensor_e() const;
  void set_sensor_e(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robosar_fms.Ultrasonic)
 private:
  void set_has_sensor_a();
  void clear_has_sensor_a();
  void set_has_sensor_b();
  void clear_has_sensor_b();
  void set_has_sensor_c();
  void clear_has_sensor_c();
  void set_has_sensor_d();
  void clear_has_sensor_d();
  void set_has_sensor_e();
  void clear_has_sensor_e();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 sensor_a_;
  ::google::protobuf::uint32 sensor_b_;
  ::google::protobuf::uint32 sensor_c_;
  ::google::protobuf::uint32 sensor_d_;
  ::google::protobuf::uint32 sensor_e_;
  friend struct ::protobuf_robosar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Infrared : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robosar_fms.Infrared) */ {
 public:
  Infrared();
  virtual ~Infrared();

  Infrared(const Infrared& from);

  inline Infrared& operator=(const Infrared& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Infrared(Infrared&& from) noexcept
    : Infrared() {
    *this = ::std::move(from);
  }

  inline Infrared& operator=(Infrared&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Infrared& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Infrared* internal_default_instance() {
    return reinterpret_cast<const Infrared*>(
               &_Infrared_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Infrared* other);
  friend void swap(Infrared& a, Infrared& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Infrared* New() const final {
    return CreateMaybeMessage<Infrared>(NULL);
  }

  Infrared* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Infrared>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Infrared& from);
  void MergeFrom(const Infrared& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Infrared* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sensor_a = 1;
  bool has_sensor_a() const;
  void clear_sensor_a();
  static const int kSensorAFieldNumber = 1;
  ::google::protobuf::uint32 sensor_a() const;
  void set_sensor_a(::google::protobuf::uint32 value);

  // required uint32 sensor_b = 2;
  bool has_sensor_b() const;
  void clear_sensor_b();
  static const int kSensorBFieldNumber = 2;
  ::google::protobuf::uint32 sensor_b() const;
  void set_sensor_b(::google::protobuf::uint32 value);

  // required uint32 sensor_c = 3;
  bool has_sensor_c() const;
  void clear_sensor_c();
  static const int kSensorCFieldNumber = 3;
  ::google::protobuf::uint32 sensor_c() const;
  void set_sensor_c(::google::protobuf::uint32 value);

  // required uint32 sensor_d = 4;
  bool has_sensor_d() const;
  void clear_sensor_d();
  static const int kSensorDFieldNumber = 4;
  ::google::protobuf::uint32 sensor_d() const;
  void set_sensor_d(::google::protobuf::uint32 value);

  // required uint32 sensor_e = 5;
  bool has_sensor_e() const;
  void clear_sensor_e();
  static const int kSensorEFieldNumber = 5;
  ::google::protobuf::uint32 sensor_e() const;
  void set_sensor_e(::google::protobuf::uint32 value);

  // required uint32 sensor_f = 6;
  bool has_sensor_f() const;
  void clear_sensor_f();
  static const int kSensorFFieldNumber = 6;
  ::google::protobuf::uint32 sensor_f() const;
  void set_sensor_f(::google::protobuf::uint32 value);

  // required uint32 sensor_g = 7;
  bool has_sensor_g() const;
  void clear_sensor_g();
  static const int kSensorGFieldNumber = 7;
  ::google::protobuf::uint32 sensor_g() const;
  void set_sensor_g(::google::protobuf::uint32 value);

  // required uint32 sensor_h = 8;
  bool has_sensor_h() const;
  void clear_sensor_h();
  static const int kSensorHFieldNumber = 8;
  ::google::protobuf::uint32 sensor_h() const;
  void set_sensor_h(::google::protobuf::uint32 value);

  // required uint32 sensor_i = 9;
  bool has_sensor_i() const;
  void clear_sensor_i();
  static const int kSensorIFieldNumber = 9;
  ::google::protobuf::uint32 sensor_i() const;
  void set_sensor_i(::google::protobuf::uint32 value);

  // required uint32 sensor_j = 10;
  bool has_sensor_j() const;
  void clear_sensor_j();
  static const int kSensorJFieldNumber = 10;
  ::google::protobuf::uint32 sensor_j() const;
  void set_sensor_j(::google::protobuf::uint32 value);

  // required uint32 sensor_k = 11;
  bool has_sensor_k() const;
  void clear_sensor_k();
  static const int kSensorKFieldNumber = 11;
  ::google::protobuf::uint32 sensor_k() const;
  void set_sensor_k(::google::protobuf::uint32 value);

  // required uint32 sensor_l = 12;
  bool has_sensor_l() const;
  void clear_sensor_l();
  static const int kSensorLFieldNumber = 12;
  ::google::protobuf::uint32 sensor_l() const;
  void set_sensor_l(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:robosar_fms.Infrared)
 private:
  void set_has_sensor_a();
  void clear_has_sensor_a();
  void set_has_sensor_b();
  void clear_has_sensor_b();
  void set_has_sensor_c();
  void clear_has_sensor_c();
  void set_has_sensor_d();
  void clear_has_sensor_d();
  void set_has_sensor_e();
  void clear_has_sensor_e();
  void set_has_sensor_f();
  void clear_has_sensor_f();
  void set_has_sensor_g();
  void clear_has_sensor_g();
  void set_has_sensor_h();
  void clear_has_sensor_h();
  void set_has_sensor_i();
  void clear_has_sensor_i();
  void set_has_sensor_j();
  void clear_has_sensor_j();
  void set_has_sensor_k();
  void clear_has_sensor_k();
  void set_has_sensor_l();
  void clear_has_sensor_l();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 sensor_a_;
  ::google::protobuf::uint32 sensor_b_;
  ::google::protobuf::uint32 sensor_c_;
  ::google::protobuf::uint32 sensor_d_;
  ::google::protobuf::uint32 sensor_e_;
  ::google::protobuf::uint32 sensor_f_;
  ::google::protobuf::uint32 sensor_g_;
  ::google::protobuf::uint32 sensor_h_;
  ::google::protobuf::uint32 sensor_i_;
  ::google::protobuf::uint32 sensor_j_;
  ::google::protobuf::uint32 sensor_k_;
  ::google::protobuf::uint32 sensor_l_;
  friend struct ::protobuf_robosar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gyroscope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robosar_fms.Gyroscope) */ {
 public:
  Gyroscope();
  virtual ~Gyroscope();

  Gyroscope(const Gyroscope& from);

  inline Gyroscope& operator=(const Gyroscope& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gyroscope(Gyroscope&& from) noexcept
    : Gyroscope() {
    *this = ::std::move(from);
  }

  inline Gyroscope& operator=(Gyroscope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gyroscope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gyroscope* internal_default_instance() {
    return reinterpret_cast<const Gyroscope*>(
               &_Gyroscope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Gyroscope* other);
  friend void swap(Gyroscope& a, Gyroscope& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gyroscope* New() const final {
    return CreateMaybeMessage<Gyroscope>(NULL);
  }

  Gyroscope* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gyroscope>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Gyroscope& from);
  void MergeFrom(const Gyroscope& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gyroscope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double gyro_x = 1;
  bool has_gyro_x() const;
  void clear_gyro_x();
  static const int kGyroXFieldNumber = 1;
  double gyro_x() const;
  void set_gyro_x(double value);

  // required double gyro_y = 2;
  bool has_gyro_y() const;
  void clear_gyro_y();
  static const int kGyroYFieldNumber = 2;
  double gyro_y() const;
  void set_gyro_y(double value);

  // required double gyro_z = 3;
  bool has_gyro_z() const;
  void clear_gyro_z();
  static const int kGyroZFieldNumber = 3;
  double gyro_z() const;
  void set_gyro_z(double value);

  // @@protoc_insertion_point(class_scope:robosar_fms.Gyroscope)
 private:
  void set_has_gyro_x();
  void clear_has_gyro_x();
  void set_has_gyro_y();
  void clear_has_gyro_y();
  void set_has_gyro_z();
  void clear_has_gyro_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double gyro_x_;
  double gyro_y_;
  double gyro_z_;
  friend struct ::protobuf_robosar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Encoder_count : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robosar_fms.Encoder_count) */ {
 public:
  Encoder_count();
  virtual ~Encoder_count();

  Encoder_count(const Encoder_count& from);

  inline Encoder_count& operator=(const Encoder_count& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Encoder_count(Encoder_count&& from) noexcept
    : Encoder_count() {
    *this = ::std::move(from);
  }

  inline Encoder_count& operator=(Encoder_count&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Encoder_count& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Encoder_count* internal_default_instance() {
    return reinterpret_cast<const Encoder_count*>(
               &_Encoder_count_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Encoder_count* other);
  friend void swap(Encoder_count& a, Encoder_count& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Encoder_count* New() const final {
    return CreateMaybeMessage<Encoder_count>(NULL);
  }

  Encoder_count* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Encoder_count>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Encoder_count& from);
  void MergeFrom(const Encoder_count& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encoder_count* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 left = 1;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  ::google::protobuf::uint64 left() const;
  void set_left(::google::protobuf::uint64 value);

  // required uint64 right = 2;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 2;
  ::google::protobuf::uint64 right() const;
  void set_right(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:robosar_fms.Encoder_count)
 private:
  void set_has_left();
  void clear_has_left();
  void set_has_right();
  void clear_has_right();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 left_;
  ::google::protobuf::uint64 right_;
  friend struct ::protobuf_robosar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Encoder_speed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robosar_fms.Encoder_speed) */ {
 public:
  Encoder_speed();
  virtual ~Encoder_speed();

  Encoder_speed(const Encoder_speed& from);

  inline Encoder_speed& operator=(const Encoder_speed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Encoder_speed(Encoder_speed&& from) noexcept
    : Encoder_speed() {
    *this = ::std::move(from);
  }

  inline Encoder_speed& operator=(Encoder_speed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Encoder_speed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Encoder_speed* internal_default_instance() {
    return reinterpret_cast<const Encoder_speed*>(
               &_Encoder_speed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Encoder_speed* other);
  friend void swap(Encoder_speed& a, Encoder_speed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Encoder_speed* New() const final {
    return CreateMaybeMessage<Encoder_speed>(NULL);
  }

  Encoder_speed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Encoder_speed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Encoder_speed& from);
  void MergeFrom(const Encoder_speed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encoder_speed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 left = 1;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  ::google::protobuf::uint64 left() const;
  void set_left(::google::protobuf::uint64 value);

  // required uint64 right = 2;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 2;
  ::google::protobuf::uint64 right() const;
  void set_right(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:robosar_fms.Encoder_speed)
 private:
  void set_has_left();
  void clear_has_left();
  void set_has_right();
  void clear_has_right();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 left_;
  ::google::protobuf::uint64 right_;
  friend struct ::protobuf_robosar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robosar_fms.SensorData) */ {
 public:
  SensorData();
  virtual ~SensorData();

  SensorData(const SensorData& from);

  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorData(SensorData&& from) noexcept
    : SensorData() {
    *this = ::std::move(from);
  }

  inline SensorData& operator=(SensorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorData* internal_default_instance() {
    return reinterpret_cast<const SensorData*>(
               &_SensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SensorData* other);
  friend void swap(SensorData& a, SensorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorData* New() const final {
    return CreateMaybeMessage<SensorData>(NULL);
  }

  SensorData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorData& from);
  void MergeFrom(const SensorData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .robosar_fms.Accelerometer accel_data = 2;
  bool has_accel_data() const;
  void clear_accel_data();
  static const int kAccelDataFieldNumber = 2;
  private:
  const ::robosar_fms::Accelerometer& _internal_accel_data() const;
  public:
  const ::robosar_fms::Accelerometer& accel_data() const;
  ::robosar_fms::Accelerometer* release_accel_data();
  ::robosar_fms::Accelerometer* mutable_accel_data();
  void set_allocated_accel_data(::robosar_fms::Accelerometer* accel_data);

  // required .robosar_fms.Gyroscope gyro_data = 3;
  bool has_gyro_data() const;
  void clear_gyro_data();
  static const int kGyroDataFieldNumber = 3;
  private:
  const ::robosar_fms::Gyroscope& _internal_gyro_data() const;
  public:
  const ::robosar_fms::Gyroscope& gyro_data() const;
  ::robosar_fms::Gyroscope* release_gyro_data();
  ::robosar_fms::Gyroscope* mutable_gyro_data();
  void set_allocated_gyro_data(::robosar_fms::Gyroscope* gyro_data);

  // required .robosar_fms.Encoder_count count_data = 4;
  bool has_count_data() const;
  void clear_count_data();
  static const int kCountDataFieldNumber = 4;
  private:
  const ::robosar_fms::Encoder_count& _internal_count_data() const;
  public:
  const ::robosar_fms::Encoder_count& count_data() const;
  ::robosar_fms::Encoder_count* release_count_data();
  ::robosar_fms::Encoder_count* mutable_count_data();
  void set_allocated_count_data(::robosar_fms::Encoder_count* count_data);

  // required .robosar_fms.Encoder_speed speed_data = 5;
  bool has_speed_data() const;
  void clear_speed_data();
  static const int kSpeedDataFieldNumber = 5;
  private:
  const ::robosar_fms::Encoder_speed& _internal_speed_data() const;
  public:
  const ::robosar_fms::Encoder_speed& speed_data() const;
  ::robosar_fms::Encoder_speed* release_speed_data();
  ::robosar_fms::Encoder_speed* mutable_speed_data();
  void set_allocated_speed_data(::robosar_fms::Encoder_speed* speed_data);

  // required .robosar_fms.Infrared ir_data = 6;
  bool has_ir_data() const;
  void clear_ir_data();
  static const int kIrDataFieldNumber = 6;
  private:
  const ::robosar_fms::Infrared& _internal_ir_data() const;
  public:
  const ::robosar_fms::Infrared& ir_data() const;
  ::robosar_fms::Infrared* release_ir_data();
  ::robosar_fms::Infrared* mutable_ir_data();
  void set_allocated_ir_data(::robosar_fms::Infrared* ir_data);

  // required .robosar_fms.Ultrasonic us_data = 7;
  bool has_us_data() const;
  void clear_us_data();
  static const int kUsDataFieldNumber = 7;
  private:
  const ::robosar_fms::Ultrasonic& _internal_us_data() const;
  public:
  const ::robosar_fms::Ultrasonic& us_data() const;
  ::robosar_fms::Ultrasonic* release_us_data();
  ::robosar_fms::Ultrasonic* mutable_us_data();
  void set_allocated_us_data(::robosar_fms::Ultrasonic* us_data);

  // required uint64 timestamp_ns = 1;
  bool has_timestamp_ns() const;
  void clear_timestamp_ns();
  static const int kTimestampNsFieldNumber = 1;
  ::google::protobuf::uint64 timestamp_ns() const;
  void set_timestamp_ns(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:robosar_fms.SensorData)
 private:
  void set_has_timestamp_ns();
  void clear_has_timestamp_ns();
  void set_has_accel_data();
  void clear_has_accel_data();
  void set_has_gyro_data();
  void clear_has_gyro_data();
  void set_has_count_data();
  void clear_has_count_data();
  void set_has_speed_data();
  void clear_has_speed_data();
  void set_has_ir_data();
  void clear_has_ir_data();
  void set_has_us_data();
  void clear_has_us_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::robosar_fms::Accelerometer* accel_data_;
  ::robosar_fms::Gyroscope* gyro_data_;
  ::robosar_fms::Encoder_count* count_data_;
  ::robosar_fms::Encoder_speed* speed_data_;
  ::robosar_fms::Infrared* ir_data_;
  ::robosar_fms::Ultrasonic* us_data_;
  ::google::protobuf::uint64 timestamp_ns_;
  friend struct ::protobuf_robosar_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Accelerometer

// required double acc_x = 1;
inline bool Accelerometer::has_acc_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Accelerometer::set_has_acc_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Accelerometer::clear_has_acc_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Accelerometer::clear_acc_x() {
  acc_x_ = 0;
  clear_has_acc_x();
}
inline double Accelerometer::acc_x() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Accelerometer.acc_x)
  return acc_x_;
}
inline void Accelerometer::set_acc_x(double value) {
  set_has_acc_x();
  acc_x_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Accelerometer.acc_x)
}

// required double acc_y = 2;
inline bool Accelerometer::has_acc_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Accelerometer::set_has_acc_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Accelerometer::clear_has_acc_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Accelerometer::clear_acc_y() {
  acc_y_ = 0;
  clear_has_acc_y();
}
inline double Accelerometer::acc_y() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Accelerometer.acc_y)
  return acc_y_;
}
inline void Accelerometer::set_acc_y(double value) {
  set_has_acc_y();
  acc_y_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Accelerometer.acc_y)
}

// required double acc_z = 3;
inline bool Accelerometer::has_acc_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Accelerometer::set_has_acc_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Accelerometer::clear_has_acc_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Accelerometer::clear_acc_z() {
  acc_z_ = 0;
  clear_has_acc_z();
}
inline double Accelerometer::acc_z() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Accelerometer.acc_z)
  return acc_z_;
}
inline void Accelerometer::set_acc_z(double value) {
  set_has_acc_z();
  acc_z_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Accelerometer.acc_z)
}

// -------------------------------------------------------------------

// Ultrasonic

// required uint32 sensor_a = 1;
inline bool Ultrasonic::has_sensor_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ultrasonic::set_has_sensor_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ultrasonic::clear_has_sensor_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ultrasonic::clear_sensor_a() {
  sensor_a_ = 0u;
  clear_has_sensor_a();
}
inline ::google::protobuf::uint32 Ultrasonic::sensor_a() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Ultrasonic.sensor_a)
  return sensor_a_;
}
inline void Ultrasonic::set_sensor_a(::google::protobuf::uint32 value) {
  set_has_sensor_a();
  sensor_a_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Ultrasonic.sensor_a)
}

// required uint32 sensor_b = 2;
inline bool Ultrasonic::has_sensor_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ultrasonic::set_has_sensor_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ultrasonic::clear_has_sensor_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ultrasonic::clear_sensor_b() {
  sensor_b_ = 0u;
  clear_has_sensor_b();
}
inline ::google::protobuf::uint32 Ultrasonic::sensor_b() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Ultrasonic.sensor_b)
  return sensor_b_;
}
inline void Ultrasonic::set_sensor_b(::google::protobuf::uint32 value) {
  set_has_sensor_b();
  sensor_b_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Ultrasonic.sensor_b)
}

// required uint32 sensor_c = 3;
inline bool Ultrasonic::has_sensor_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ultrasonic::set_has_sensor_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ultrasonic::clear_has_sensor_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ultrasonic::clear_sensor_c() {
  sensor_c_ = 0u;
  clear_has_sensor_c();
}
inline ::google::protobuf::uint32 Ultrasonic::sensor_c() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Ultrasonic.sensor_c)
  return sensor_c_;
}
inline void Ultrasonic::set_sensor_c(::google::protobuf::uint32 value) {
  set_has_sensor_c();
  sensor_c_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Ultrasonic.sensor_c)
}

// required uint32 sensor_d = 4;
inline bool Ultrasonic::has_sensor_d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ultrasonic::set_has_sensor_d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ultrasonic::clear_has_sensor_d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ultrasonic::clear_sensor_d() {
  sensor_d_ = 0u;
  clear_has_sensor_d();
}
inline ::google::protobuf::uint32 Ultrasonic::sensor_d() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Ultrasonic.sensor_d)
  return sensor_d_;
}
inline void Ultrasonic::set_sensor_d(::google::protobuf::uint32 value) {
  set_has_sensor_d();
  sensor_d_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Ultrasonic.sensor_d)
}

// required uint32 sensor_e = 5;
inline bool Ultrasonic::has_sensor_e() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ultrasonic::set_has_sensor_e() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ultrasonic::clear_has_sensor_e() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ultrasonic::clear_sensor_e() {
  sensor_e_ = 0u;
  clear_has_sensor_e();
}
inline ::google::protobuf::uint32 Ultrasonic::sensor_e() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Ultrasonic.sensor_e)
  return sensor_e_;
}
inline void Ultrasonic::set_sensor_e(::google::protobuf::uint32 value) {
  set_has_sensor_e();
  sensor_e_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Ultrasonic.sensor_e)
}

// -------------------------------------------------------------------

// Infrared

// required uint32 sensor_a = 1;
inline bool Infrared::has_sensor_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Infrared::set_has_sensor_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Infrared::clear_has_sensor_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Infrared::clear_sensor_a() {
  sensor_a_ = 0u;
  clear_has_sensor_a();
}
inline ::google::protobuf::uint32 Infrared::sensor_a() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_a)
  return sensor_a_;
}
inline void Infrared::set_sensor_a(::google::protobuf::uint32 value) {
  set_has_sensor_a();
  sensor_a_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_a)
}

// required uint32 sensor_b = 2;
inline bool Infrared::has_sensor_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Infrared::set_has_sensor_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Infrared::clear_has_sensor_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Infrared::clear_sensor_b() {
  sensor_b_ = 0u;
  clear_has_sensor_b();
}
inline ::google::protobuf::uint32 Infrared::sensor_b() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_b)
  return sensor_b_;
}
inline void Infrared::set_sensor_b(::google::protobuf::uint32 value) {
  set_has_sensor_b();
  sensor_b_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_b)
}

// required uint32 sensor_c = 3;
inline bool Infrared::has_sensor_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Infrared::set_has_sensor_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Infrared::clear_has_sensor_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Infrared::clear_sensor_c() {
  sensor_c_ = 0u;
  clear_has_sensor_c();
}
inline ::google::protobuf::uint32 Infrared::sensor_c() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_c)
  return sensor_c_;
}
inline void Infrared::set_sensor_c(::google::protobuf::uint32 value) {
  set_has_sensor_c();
  sensor_c_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_c)
}

// required uint32 sensor_d = 4;
inline bool Infrared::has_sensor_d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Infrared::set_has_sensor_d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Infrared::clear_has_sensor_d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Infrared::clear_sensor_d() {
  sensor_d_ = 0u;
  clear_has_sensor_d();
}
inline ::google::protobuf::uint32 Infrared::sensor_d() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_d)
  return sensor_d_;
}
inline void Infrared::set_sensor_d(::google::protobuf::uint32 value) {
  set_has_sensor_d();
  sensor_d_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_d)
}

// required uint32 sensor_e = 5;
inline bool Infrared::has_sensor_e() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Infrared::set_has_sensor_e() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Infrared::clear_has_sensor_e() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Infrared::clear_sensor_e() {
  sensor_e_ = 0u;
  clear_has_sensor_e();
}
inline ::google::protobuf::uint32 Infrared::sensor_e() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_e)
  return sensor_e_;
}
inline void Infrared::set_sensor_e(::google::protobuf::uint32 value) {
  set_has_sensor_e();
  sensor_e_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_e)
}

// required uint32 sensor_f = 6;
inline bool Infrared::has_sensor_f() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Infrared::set_has_sensor_f() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Infrared::clear_has_sensor_f() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Infrared::clear_sensor_f() {
  sensor_f_ = 0u;
  clear_has_sensor_f();
}
inline ::google::protobuf::uint32 Infrared::sensor_f() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_f)
  return sensor_f_;
}
inline void Infrared::set_sensor_f(::google::protobuf::uint32 value) {
  set_has_sensor_f();
  sensor_f_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_f)
}

// required uint32 sensor_g = 7;
inline bool Infrared::has_sensor_g() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Infrared::set_has_sensor_g() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Infrared::clear_has_sensor_g() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Infrared::clear_sensor_g() {
  sensor_g_ = 0u;
  clear_has_sensor_g();
}
inline ::google::protobuf::uint32 Infrared::sensor_g() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_g)
  return sensor_g_;
}
inline void Infrared::set_sensor_g(::google::protobuf::uint32 value) {
  set_has_sensor_g();
  sensor_g_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_g)
}

// required uint32 sensor_h = 8;
inline bool Infrared::has_sensor_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Infrared::set_has_sensor_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Infrared::clear_has_sensor_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Infrared::clear_sensor_h() {
  sensor_h_ = 0u;
  clear_has_sensor_h();
}
inline ::google::protobuf::uint32 Infrared::sensor_h() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_h)
  return sensor_h_;
}
inline void Infrared::set_sensor_h(::google::protobuf::uint32 value) {
  set_has_sensor_h();
  sensor_h_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_h)
}

// required uint32 sensor_i = 9;
inline bool Infrared::has_sensor_i() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Infrared::set_has_sensor_i() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Infrared::clear_has_sensor_i() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Infrared::clear_sensor_i() {
  sensor_i_ = 0u;
  clear_has_sensor_i();
}
inline ::google::protobuf::uint32 Infrared::sensor_i() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_i)
  return sensor_i_;
}
inline void Infrared::set_sensor_i(::google::protobuf::uint32 value) {
  set_has_sensor_i();
  sensor_i_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_i)
}

// required uint32 sensor_j = 10;
inline bool Infrared::has_sensor_j() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Infrared::set_has_sensor_j() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Infrared::clear_has_sensor_j() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Infrared::clear_sensor_j() {
  sensor_j_ = 0u;
  clear_has_sensor_j();
}
inline ::google::protobuf::uint32 Infrared::sensor_j() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_j)
  return sensor_j_;
}
inline void Infrared::set_sensor_j(::google::protobuf::uint32 value) {
  set_has_sensor_j();
  sensor_j_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_j)
}

// required uint32 sensor_k = 11;
inline bool Infrared::has_sensor_k() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Infrared::set_has_sensor_k() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Infrared::clear_has_sensor_k() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Infrared::clear_sensor_k() {
  sensor_k_ = 0u;
  clear_has_sensor_k();
}
inline ::google::protobuf::uint32 Infrared::sensor_k() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_k)
  return sensor_k_;
}
inline void Infrared::set_sensor_k(::google::protobuf::uint32 value) {
  set_has_sensor_k();
  sensor_k_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_k)
}

// required uint32 sensor_l = 12;
inline bool Infrared::has_sensor_l() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Infrared::set_has_sensor_l() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Infrared::clear_has_sensor_l() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Infrared::clear_sensor_l() {
  sensor_l_ = 0u;
  clear_has_sensor_l();
}
inline ::google::protobuf::uint32 Infrared::sensor_l() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Infrared.sensor_l)
  return sensor_l_;
}
inline void Infrared::set_sensor_l(::google::protobuf::uint32 value) {
  set_has_sensor_l();
  sensor_l_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Infrared.sensor_l)
}

// -------------------------------------------------------------------

// Gyroscope

// required double gyro_x = 1;
inline bool Gyroscope::has_gyro_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gyroscope::set_has_gyro_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gyroscope::clear_has_gyro_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gyroscope::clear_gyro_x() {
  gyro_x_ = 0;
  clear_has_gyro_x();
}
inline double Gyroscope::gyro_x() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Gyroscope.gyro_x)
  return gyro_x_;
}
inline void Gyroscope::set_gyro_x(double value) {
  set_has_gyro_x();
  gyro_x_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Gyroscope.gyro_x)
}

// required double gyro_y = 2;
inline bool Gyroscope::has_gyro_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gyroscope::set_has_gyro_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gyroscope::clear_has_gyro_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gyroscope::clear_gyro_y() {
  gyro_y_ = 0;
  clear_has_gyro_y();
}
inline double Gyroscope::gyro_y() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Gyroscope.gyro_y)
  return gyro_y_;
}
inline void Gyroscope::set_gyro_y(double value) {
  set_has_gyro_y();
  gyro_y_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Gyroscope.gyro_y)
}

// required double gyro_z = 3;
inline bool Gyroscope::has_gyro_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gyroscope::set_has_gyro_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gyroscope::clear_has_gyro_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gyroscope::clear_gyro_z() {
  gyro_z_ = 0;
  clear_has_gyro_z();
}
inline double Gyroscope::gyro_z() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Gyroscope.gyro_z)
  return gyro_z_;
}
inline void Gyroscope::set_gyro_z(double value) {
  set_has_gyro_z();
  gyro_z_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Gyroscope.gyro_z)
}

// -------------------------------------------------------------------

// Encoder_count

// required uint64 left = 1;
inline bool Encoder_count::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Encoder_count::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Encoder_count::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Encoder_count::clear_left() {
  left_ = GOOGLE_ULONGLONG(0);
  clear_has_left();
}
inline ::google::protobuf::uint64 Encoder_count::left() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Encoder_count.left)
  return left_;
}
inline void Encoder_count::set_left(::google::protobuf::uint64 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Encoder_count.left)
}

// required uint64 right = 2;
inline bool Encoder_count::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Encoder_count::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Encoder_count::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Encoder_count::clear_right() {
  right_ = GOOGLE_ULONGLONG(0);
  clear_has_right();
}
inline ::google::protobuf::uint64 Encoder_count::right() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Encoder_count.right)
  return right_;
}
inline void Encoder_count::set_right(::google::protobuf::uint64 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Encoder_count.right)
}

// -------------------------------------------------------------------

// Encoder_speed

// required uint64 left = 1;
inline bool Encoder_speed::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Encoder_speed::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Encoder_speed::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Encoder_speed::clear_left() {
  left_ = GOOGLE_ULONGLONG(0);
  clear_has_left();
}
inline ::google::protobuf::uint64 Encoder_speed::left() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Encoder_speed.left)
  return left_;
}
inline void Encoder_speed::set_left(::google::protobuf::uint64 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Encoder_speed.left)
}

// required uint64 right = 2;
inline bool Encoder_speed::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Encoder_speed::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Encoder_speed::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Encoder_speed::clear_right() {
  right_ = GOOGLE_ULONGLONG(0);
  clear_has_right();
}
inline ::google::protobuf::uint64 Encoder_speed::right() const {
  // @@protoc_insertion_point(field_get:robosar_fms.Encoder_speed.right)
  return right_;
}
inline void Encoder_speed::set_right(::google::protobuf::uint64 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.Encoder_speed.right)
}

// -------------------------------------------------------------------

// SensorData

// required uint64 timestamp_ns = 1;
inline bool SensorData::has_timestamp_ns() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SensorData::set_has_timestamp_ns() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SensorData::clear_has_timestamp_ns() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SensorData::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_ns();
}
inline ::google::protobuf::uint64 SensorData::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:robosar_fms.SensorData.timestamp_ns)
  return timestamp_ns_;
}
inline void SensorData::set_timestamp_ns(::google::protobuf::uint64 value) {
  set_has_timestamp_ns();
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:robosar_fms.SensorData.timestamp_ns)
}

// required .robosar_fms.Accelerometer accel_data = 2;
inline bool SensorData::has_accel_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorData::set_has_accel_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorData::clear_has_accel_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorData::clear_accel_data() {
  if (accel_data_ != NULL) accel_data_->Clear();
  clear_has_accel_data();
}
inline const ::robosar_fms::Accelerometer& SensorData::_internal_accel_data() const {
  return *accel_data_;
}
inline const ::robosar_fms::Accelerometer& SensorData::accel_data() const {
  const ::robosar_fms::Accelerometer* p = accel_data_;
  // @@protoc_insertion_point(field_get:robosar_fms.SensorData.accel_data)
  return p != NULL ? *p : *reinterpret_cast<const ::robosar_fms::Accelerometer*>(
      &::robosar_fms::_Accelerometer_default_instance_);
}
inline ::robosar_fms::Accelerometer* SensorData::release_accel_data() {
  // @@protoc_insertion_point(field_release:robosar_fms.SensorData.accel_data)
  clear_has_accel_data();
  ::robosar_fms::Accelerometer* temp = accel_data_;
  accel_data_ = NULL;
  return temp;
}
inline ::robosar_fms::Accelerometer* SensorData::mutable_accel_data() {
  set_has_accel_data();
  if (accel_data_ == NULL) {
    auto* p = CreateMaybeMessage<::robosar_fms::Accelerometer>(GetArenaNoVirtual());
    accel_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosar_fms.SensorData.accel_data)
  return accel_data_;
}
inline void SensorData::set_allocated_accel_data(::robosar_fms::Accelerometer* accel_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accel_data_;
  }
  if (accel_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accel_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accel_data, submessage_arena);
    }
    set_has_accel_data();
  } else {
    clear_has_accel_data();
  }
  accel_data_ = accel_data;
  // @@protoc_insertion_point(field_set_allocated:robosar_fms.SensorData.accel_data)
}

// required .robosar_fms.Gyroscope gyro_data = 3;
inline bool SensorData::has_gyro_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorData::set_has_gyro_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorData::clear_has_gyro_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorData::clear_gyro_data() {
  if (gyro_data_ != NULL) gyro_data_->Clear();
  clear_has_gyro_data();
}
inline const ::robosar_fms::Gyroscope& SensorData::_internal_gyro_data() const {
  return *gyro_data_;
}
inline const ::robosar_fms::Gyroscope& SensorData::gyro_data() const {
  const ::robosar_fms::Gyroscope* p = gyro_data_;
  // @@protoc_insertion_point(field_get:robosar_fms.SensorData.gyro_data)
  return p != NULL ? *p : *reinterpret_cast<const ::robosar_fms::Gyroscope*>(
      &::robosar_fms::_Gyroscope_default_instance_);
}
inline ::robosar_fms::Gyroscope* SensorData::release_gyro_data() {
  // @@protoc_insertion_point(field_release:robosar_fms.SensorData.gyro_data)
  clear_has_gyro_data();
  ::robosar_fms::Gyroscope* temp = gyro_data_;
  gyro_data_ = NULL;
  return temp;
}
inline ::robosar_fms::Gyroscope* SensorData::mutable_gyro_data() {
  set_has_gyro_data();
  if (gyro_data_ == NULL) {
    auto* p = CreateMaybeMessage<::robosar_fms::Gyroscope>(GetArenaNoVirtual());
    gyro_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosar_fms.SensorData.gyro_data)
  return gyro_data_;
}
inline void SensorData::set_allocated_gyro_data(::robosar_fms::Gyroscope* gyro_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gyro_data_;
  }
  if (gyro_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gyro_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gyro_data, submessage_arena);
    }
    set_has_gyro_data();
  } else {
    clear_has_gyro_data();
  }
  gyro_data_ = gyro_data;
  // @@protoc_insertion_point(field_set_allocated:robosar_fms.SensorData.gyro_data)
}

// required .robosar_fms.Encoder_count count_data = 4;
inline bool SensorData::has_count_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorData::set_has_count_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SensorData::clear_has_count_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SensorData::clear_count_data() {
  if (count_data_ != NULL) count_data_->Clear();
  clear_has_count_data();
}
inline const ::robosar_fms::Encoder_count& SensorData::_internal_count_data() const {
  return *count_data_;
}
inline const ::robosar_fms::Encoder_count& SensorData::count_data() const {
  const ::robosar_fms::Encoder_count* p = count_data_;
  // @@protoc_insertion_point(field_get:robosar_fms.SensorData.count_data)
  return p != NULL ? *p : *reinterpret_cast<const ::robosar_fms::Encoder_count*>(
      &::robosar_fms::_Encoder_count_default_instance_);
}
inline ::robosar_fms::Encoder_count* SensorData::release_count_data() {
  // @@protoc_insertion_point(field_release:robosar_fms.SensorData.count_data)
  clear_has_count_data();
  ::robosar_fms::Encoder_count* temp = count_data_;
  count_data_ = NULL;
  return temp;
}
inline ::robosar_fms::Encoder_count* SensorData::mutable_count_data() {
  set_has_count_data();
  if (count_data_ == NULL) {
    auto* p = CreateMaybeMessage<::robosar_fms::Encoder_count>(GetArenaNoVirtual());
    count_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosar_fms.SensorData.count_data)
  return count_data_;
}
inline void SensorData::set_allocated_count_data(::robosar_fms::Encoder_count* count_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete count_data_;
  }
  if (count_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      count_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, count_data, submessage_arena);
    }
    set_has_count_data();
  } else {
    clear_has_count_data();
  }
  count_data_ = count_data;
  // @@protoc_insertion_point(field_set_allocated:robosar_fms.SensorData.count_data)
}

// required .robosar_fms.Encoder_speed speed_data = 5;
inline bool SensorData::has_speed_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SensorData::set_has_speed_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SensorData::clear_has_speed_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SensorData::clear_speed_data() {
  if (speed_data_ != NULL) speed_data_->Clear();
  clear_has_speed_data();
}
inline const ::robosar_fms::Encoder_speed& SensorData::_internal_speed_data() const {
  return *speed_data_;
}
inline const ::robosar_fms::Encoder_speed& SensorData::speed_data() const {
  const ::robosar_fms::Encoder_speed* p = speed_data_;
  // @@protoc_insertion_point(field_get:robosar_fms.SensorData.speed_data)
  return p != NULL ? *p : *reinterpret_cast<const ::robosar_fms::Encoder_speed*>(
      &::robosar_fms::_Encoder_speed_default_instance_);
}
inline ::robosar_fms::Encoder_speed* SensorData::release_speed_data() {
  // @@protoc_insertion_point(field_release:robosar_fms.SensorData.speed_data)
  clear_has_speed_data();
  ::robosar_fms::Encoder_speed* temp = speed_data_;
  speed_data_ = NULL;
  return temp;
}
inline ::robosar_fms::Encoder_speed* SensorData::mutable_speed_data() {
  set_has_speed_data();
  if (speed_data_ == NULL) {
    auto* p = CreateMaybeMessage<::robosar_fms::Encoder_speed>(GetArenaNoVirtual());
    speed_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosar_fms.SensorData.speed_data)
  return speed_data_;
}
inline void SensorData::set_allocated_speed_data(::robosar_fms::Encoder_speed* speed_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete speed_data_;
  }
  if (speed_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_data, submessage_arena);
    }
    set_has_speed_data();
  } else {
    clear_has_speed_data();
  }
  speed_data_ = speed_data;
  // @@protoc_insertion_point(field_set_allocated:robosar_fms.SensorData.speed_data)
}

// required .robosar_fms.Infrared ir_data = 6;
inline bool SensorData::has_ir_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SensorData::set_has_ir_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SensorData::clear_has_ir_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SensorData::clear_ir_data() {
  if (ir_data_ != NULL) ir_data_->Clear();
  clear_has_ir_data();
}
inline const ::robosar_fms::Infrared& SensorData::_internal_ir_data() const {
  return *ir_data_;
}
inline const ::robosar_fms::Infrared& SensorData::ir_data() const {
  const ::robosar_fms::Infrared* p = ir_data_;
  // @@protoc_insertion_point(field_get:robosar_fms.SensorData.ir_data)
  return p != NULL ? *p : *reinterpret_cast<const ::robosar_fms::Infrared*>(
      &::robosar_fms::_Infrared_default_instance_);
}
inline ::robosar_fms::Infrared* SensorData::release_ir_data() {
  // @@protoc_insertion_point(field_release:robosar_fms.SensorData.ir_data)
  clear_has_ir_data();
  ::robosar_fms::Infrared* temp = ir_data_;
  ir_data_ = NULL;
  return temp;
}
inline ::robosar_fms::Infrared* SensorData::mutable_ir_data() {
  set_has_ir_data();
  if (ir_data_ == NULL) {
    auto* p = CreateMaybeMessage<::robosar_fms::Infrared>(GetArenaNoVirtual());
    ir_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosar_fms.SensorData.ir_data)
  return ir_data_;
}
inline void SensorData::set_allocated_ir_data(::robosar_fms::Infrared* ir_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ir_data_;
  }
  if (ir_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ir_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ir_data, submessage_arena);
    }
    set_has_ir_data();
  } else {
    clear_has_ir_data();
  }
  ir_data_ = ir_data;
  // @@protoc_insertion_point(field_set_allocated:robosar_fms.SensorData.ir_data)
}

// required .robosar_fms.Ultrasonic us_data = 7;
inline bool SensorData::has_us_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SensorData::set_has_us_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SensorData::clear_has_us_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SensorData::clear_us_data() {
  if (us_data_ != NULL) us_data_->Clear();
  clear_has_us_data();
}
inline const ::robosar_fms::Ultrasonic& SensorData::_internal_us_data() const {
  return *us_data_;
}
inline const ::robosar_fms::Ultrasonic& SensorData::us_data() const {
  const ::robosar_fms::Ultrasonic* p = us_data_;
  // @@protoc_insertion_point(field_get:robosar_fms.SensorData.us_data)
  return p != NULL ? *p : *reinterpret_cast<const ::robosar_fms::Ultrasonic*>(
      &::robosar_fms::_Ultrasonic_default_instance_);
}
inline ::robosar_fms::Ultrasonic* SensorData::release_us_data() {
  // @@protoc_insertion_point(field_release:robosar_fms.SensorData.us_data)
  clear_has_us_data();
  ::robosar_fms::Ultrasonic* temp = us_data_;
  us_data_ = NULL;
  return temp;
}
inline ::robosar_fms::Ultrasonic* SensorData::mutable_us_data() {
  set_has_us_data();
  if (us_data_ == NULL) {
    auto* p = CreateMaybeMessage<::robosar_fms::Ultrasonic>(GetArenaNoVirtual());
    us_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosar_fms.SensorData.us_data)
  return us_data_;
}
inline void SensorData::set_allocated_us_data(::robosar_fms::Ultrasonic* us_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete us_data_;
  }
  if (us_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      us_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, us_data, submessage_arena);
    }
    set_has_us_data();
  } else {
    clear_has_us_data();
  }
  us_data_ = us_data;
  // @@protoc_insertion_point(field_set_allocated:robosar_fms.SensorData.us_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace robosar_fms

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_robosar_2eproto
